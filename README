# Route Advertiser

## üõ†Ô∏è Projektbeschreibung

Der **Route Advertiser** erm√∂glicht das automatische Verteilen von Netzwerk-Routen in einem lokalen Netzwerk mittels eines **Server-Client-Modells** √ºber **UDP**. Der **Server** sendet regelm√§√üig Routing-Informationen an Clients, die diese empfangen, validieren und tempor√§r in ihre Routing-Tabelle aufnehmen.

**Typische Anwendungsszenarien:**
- Automatische Verteilung von statischen Routen in einem lokalen Netzwerk
- Zentrale Steuerung und Verwaltung von Routen f√ºr mehrere Clients, z.B. wenn alle Clients bereits funktionierende Default-Routen haben aber zus√§tzlich noch durch einen Router mehrere VLANs bzw. deren Subnetze verbunden werden sollen.

---

## üíª Komponenten

### **Server**
Der Server l√§uft auf einem Router ermittelt die f√ºr ihn erreichbaren Subnetze und sendet in diese in regelm√§√üigen Abst√§nden per **UDP-Broadcast** an alle Clients. Die Nachrichten sind **digital signiert**, um Manipulationen zu verhindern.

**Hauptfunktionen:**
- Signiert die Routing-Informationen mit einem **privaten RSA-Schl√ºssel**
- Sendet regelm√§√üig UDP-Broadcast-Pakete mit zur Verf√ºgung stellbaren Routen an seine Interfaces

### **Client**
Der Client empf√§ngt Routing-Updates vom Server, √ºberpr√ºft deren **Signatur mit dem √∂ffentlichen Schl√ºssel**, f√ºgt fehlende Routen hinzu sofern er selbst noch keine Routen in diese Netze kennt und entfernt sie nach Ablauf eines **Timeouts** automatisch.

**Hauptfunktionen:**
- Empf√§ngt UDP-Pakete mit Routen
- √úberpr√ºft die digitale Signatur mit dem **√∂ffentlichen Schl√ºssel**
- F√ºgt neue Routen zur lokalen Routing-Tabelle hinzu
- Entfernt Routen nach Ablauf des definierten **Timeouts**

---

## üõ†Ô∏è Installation & Setup

### **1Ô∏è‚É£ Voraussetzungen**
- **Python 3.10+**
- **Windows / Linux mit Administratorrechten** (zum √Ñndern der Routing-Tabelle)
- **RSA-Schl√ºsselpaare** f√ºr Signaturpr√ºfung

### **2Ô∏è‚É£ Installation**
```bash
# Repository klonen
git clone https://github.com/dein-repo/route-advertiser.git
cd route-advertiser

# Abh√§ngigkeiten installieren
pip install -r requirements.txt
```

### **3Ô∏è‚É£ RSA-Schl√ºssel generieren** (falls noch nicht vorhanden)
```bash
openssl genpkey -algorithm RSA -out private.pem -pkeyopt rsa_keygen_bits:2048
openssl rsa -in private.pem -pubout -out public.pem
```

### **4Ô∏è‚É£ Konfiguration anpassen**
#### **Server (`server_config.yaml`)**
```yaml
udp_port: 5005
broadcast_interval: 30
private_key_file: "private.pem"
log_file: "server.log"
debug: true
```

#### **Client (`client_config.yaml`)**
```yaml
udp_port: 5005
public_key_file: "public.pem"
```

---

## üõ†Ô∏è Nutzung

### **Server starten**
```bash
python server.py
```

### **Client starten** (mit Admin-Rechten, falls notwendig)
```bash
python client.py start
```

### **Client im Testmodus** (zeigt nur Befehle, ohne sie auszuf√ºhren)
```bash
python client.py test
```

---

## üîß Fehlerbehebung

### **1 Signaturpr√ºfung schl√§gt fehl**
- Stelle sicher, dass Client & Server den **gleichen √∂ffentlichen Schl√ºssel** verwenden
- Pr√ºfe die korrekte JSON-Sortierung vor der Signierung

### **2 Routen werden nicht hinzugef√ºgt**
- Pr√ºfe mit `route print` (Windows) oder `ip route show` (Linux), ob die Route bereits existiert
- Logs im Debug-Modus pr√ºfen (`logging.DEBUG` aktivieren)

---

**üåü Viel Erfolg mit dem Route Advertiser!**

